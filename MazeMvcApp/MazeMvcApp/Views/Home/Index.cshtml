@model MazeMvcApp.Models.Maze

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Maze Generator App</title>

    <style>
        body 
        {
            background-color: #c1bebe;
            font-family: Arial, calibri;
            background-image: url('/images/background-img-3.png');
            background-repeat: repeat;
            background-size: contain;
            margin: 0px;
            border: 0px;
            padding: 0px;
        }

        .container 
        {
            max-width: 75%;
            margin: 0 auto;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        h1 
        {
            font-size: 50px;
            font-weight: 300;
            /* color: #89fcff; */
            color: black;
            text-shadow: 0px 0px 5px #b393d3, 0px 0px 10px #b393d3, 0px 0px 10px #b393d3, 0px 0px 20px #b393d3;
            text-align: center;
            margin-top: 15px;
        }

        .card-header
        {
            display: flex;
        }

        #open-modal-btn 
        {
           color: white;
           background-color: midnightblue;
           border-radius: 50%;
           cursor: pointer;
           font-weight: bold;
           margin: auto;
        }

        #close-modal-btn
        {
           float: right;
           font-size: 28px;
           font-weight: bold;
           cursor: pointer;
        }

        .modal-container
        {
            position: absolute;
            top: 10px;
            right: 10px;
        }

        .modal 
        {
           display: none; /* Hidden by default */
           position: fixed; /* Fixed position */
           z-index: 1; /* Place the modal popup on top of other elements */
           left: 0;
           top: 0;
           width: 100%;
           height: 100%;
           overflow: auto; /* Enable scrolling if needed */
           background-color: rgba(0, 0, 0, 0.5); /* Black background with transparency */
        }

        .modal-content 
        {
           display: block;
           background-color: #fefefe;
           margin: 10% auto; /* Centered vertically and horizontally */
           padding: 20px;
           border: 1px solid #888;
           max-width: 550px;
           border-radius: 10px;
        }

        #prev-btn 
        {
           margin-left: 17px;
        }
              
        /* margin:auto; horizontally centers the card even as the maze width increases */
        .card 
        {
            background-color: white;
            width: 420px;
            margin: auto;
            box-shadow: rgba(136, 165, 191, 1) 5px 2px 5px 0px;
            display: flex;
        }

        .card p 
        {
            margin-left: 17px;
        }

        .card-vertical-split
        {
            display: flex;
            flex-direction: row;
        }

        .left-half 
        {
            flex-grow: 1;
            height: 100%;
            width: 50%;
            text-align: right;
        }

        .right-half 
        {
            flex-grow: 1;
            height: 100%;
            width: 50%;
            text-align: left;
        }

        /* Added .card selector so that this should just affect the h2 and h4 for the pop-up */
        .card h2 
        {
            margin-left: 17px;
            margin-bottom: 1rem;
            text-decoration: underline;
        }

        .card h4 
        {
            margin-left: 17px;
            margin-bottom: 1rem;
            text-decoration: underline;
        }

        .form-group 
        {
            align-items: center;
            margin-top: 12px;
            margin-bottom: 15px;
        }

        .input-labels
        {
            align-items: center;
            margin-top: 12px;
            margin-bottom: 15px;
        }

        .form-label 
        {
            font-weight: bold;
            margin-bottom: 0px;
            padding-top: 0.6rem;
            padding-left: 0.3rem;
            padding-bottom: 0.14rem;
        }

        .form-control 
        {
            display: inline-flex;
            width: 75px;
        }

        /* only way I found of adding margin to NRow and NCol input boxes is by adding these invisible elements
           which is displayed inline-flex to the right of the input boxes.
        */
        .invisible-element
        {
            display: inline-flex;
            width: 20px;
        }

        #dropdown
        {
            width: 150px;
            margin-top: 18px;
            margin-right: 20px;
            margin-bottom: 5px;
            padding: 10px;
            font-size: 12px;
            font-weight: bold;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-shadow: 3px 3px 4px #bbb;
        }

        .maze-container 
        {
            border-radius: 5px;
            padding-top: 50px;
        }

        /* max-wdith: max-content makes maze div outer div width fit inner div width */
        .maze 
        {
            display: grid;
            grid-template-rows: repeat(@Model.NRow, 20px);
            background-color: white;
            max-width: max-content;
            box-shadow: rgba(136, 165, 191, 1) 6px 2px 16px 0px, rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;
        }

        .maze-row 
        {
            display: flex;
        }

        .maze-cell
        {
            position: relative;
            height: 20px;
            width: 20px;
        }

        /* for the css transition used in valid path display */
        .transformed-state-validPath 
        {
            /* background-color: #00ffa1 !important; */
            background-color: #f4e345 !important; 
            transition-property: background-color, transform;
            transition-timing-function: linear;
            transition-duration: 3s;
        }

        /* for the css transition used in the algorithm search display */
        .transformed-state-algorithmSearchDisplay 
        {
            background-color: #8989ff !important;
            transition-property: background-color, transform;
        }

        .button 
        {
            display: inline-block;
            padding: 7px 7px;
            font-weight: bold;
            text-decoration: none;
            border: 2px solid #000;
            border-radius: 7px;
            margin-right: 20px;
            width: 145px;
            box-shadow: 3px 3px 4px #bbb;
            transition: transform 0.3s;
        }

        .light-purple-btns
        {
            background-color: #8989ff;
            color: #fff;
        }

        .light-purple-btns:hover
        {
            transform: scale(1.1);
            background-color: #aa74d2;
        }

        .dark-purple-btns
        {
            background-color: #4b0082;
            color: #fff;
        }

        .dark-purple-btns:hover
        {
            transform: scale(1.1);
            background-color: #800080;
        }

        .clear-maze
        {
            margin-top: 3px;
        }

        #confirm-btn
        {
            margin-top: 3px;
            margin-right: 20px;
            border-radius: 6px;
            box-shadow: 3px 3px 4px #bbb;
        }

        #confirm-btn:hover
        {
            transform: scale(1.1);
            background-color: #bcbcbc;
        }

        #algorithmSearchDisplay
        {
            display: inline-block;
            padding: 7px 7px;
            background-color: #f3bb24;
            color: #fff;
            font-weight: bold;
            text-decoration: none;
            border-radius: 7px;
            margin-right: 20px;
            width: 145px;
            box-shadow: 3px 3px 4px #bbb;
            transition: transform 0.3s;
        }

        #algorithmSearchDisplay:hover
        {
            transform: scale(1.1);
            background-color: #c6870a;
        }

        .maze-cell:hover 
        {
          background-color: lightblue;
        }

        .close:hover,
        .close:focus 
        {
           color: #000;
           text-decoration: none;
           cursor: pointer;
        }

    </style>

</head>

<body>

    <div class="card">

        <div class="card-header">
            <h1>
                Maze Generator
            </h1>

            <div class="modal-container">
                <!-- Button to open the modal -->
                <button id="open-modal-btn">?</button>
                <!-- The modal -->
                <div id="modal" class="modal">
                    <div class="modal-content">
                    <span id="close-modal-btn">&times;</span>
                    <!-- Keep these empty, populate with JS -->
                    <h2></h2>
                    <p></p>
                    <h4></h4>
                    <ul id="modal-list"></ul>
                    <button id="prev-btn">Previous</button>
                    <button id="next-btn">Next</button>
                    </div>
                </div>
            </div>

        </div>

        <div class="card-body">

            <div class="card-vertical-split">

                <div class="left-half">
                    <!-- Home is the controller, asp-action is the method -->
                    <form asp-controller="Home" asp-action="GenerateMaze" method="post">
                        <div class="form-group">
                            <!-- The value="Model.NRow" is to display last entered value -->
                            <input name="nRow" type="number" class="form-control" value="@Model.NRow"/>
                            <div class="invisible-element">
                            </div>
                        </div>

                        <div class="form-group">
                            <input name="nCol" type="number" class="form-control" value="@Model.NCol"/>
                            <div class="invisible-element">
                            </div>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="button light-purple-btns">Create Maze</button>

                        </div>
                    </form>

                    <button id="solveMaze" class="button light-purple-btns">Display Path</button>

                    <form id="algorithmChoiceForm" action="/Home/ChooseAlgorithm" method="post">
                      <select id="dropdown" name="selectedAlgorithm">
                        <option value="DFS" selected>Depth-First Search</option>
                        <option value="BFS">Breadth-First Search</option>
                        <option value="bidir-DFS">Bi-Directional DFS</option>
                        <option value="bidir-BFS">Bi-Directional BFS</option>
                        <option value="dijkstras">Dijkstra's</option>
                      </select>
                      <button type="submit" id="confirm-btn">Confirm</button>
                    </form>
                </div>
                
                <div class="right-half">

                    <div class="input-labels">
                        <label class="form-label">Rows (3 - 100)</label>
                    </div>
                    <div class="input-labels">
                        <label class="form-label">Columns (3 - 100) </label>
                    </div>
                    
                    <div class="form-group">
                        @using (Html.BeginForm("EraseMaze", "Home", FormMethod.Post))
                        {
                            <button class="button dark-purple-btns clear-maze" type="submit">Erase Maze</button>
                        }
                    </div>

                    <div class="form-group">
                        <button id="clearMaze" class="button dark-purple-btns">Clear Maze</button>
                    </div>

                    <button id="algorithmSearchDisplay">Show Algorithm</button>
                </div>
            </div>

        </div>
    </div>

    <div class="maze-container">
        <div class="maze">
            @if (@Model.NRow > 1 && @Model.NCol > 1)
            {
                @for (int i = 0; i < @Model.NRow; i++)
                {
                    <div class="maze-row">
                        @for (int j = 0; j < @Model.NCol; j++)
                        {
                            <!-- creating new class for each cell -->
                            <!-- Added space between maze-cell and coords-y etc because I needed to select the cells in js -->
                            <div class="maze-cell coords-y@(i)x@(j)">

                                @if(@Model.Cells[i][j].TopEdge == true)
                                {
                                    <style> .coords-y@(i)x@(j) { border-top: 1.5px solid black; } </style>
                                }

                                @if(@Model.Cells[i][j].LeftEdge == true)
                                {
                                    <style> .coords-y@(i)x@(j) { border-left: 1.5px solid black; } </style>
                                }

                                @if (@Model.Cells[i][j].BottomEdge == true)
                                {
                                    <style> .coords-y@(i)x@(j) { border-bottom: 1.5px solid black; } </style>
                                }

                                @if (@Model.Cells[i][j].RightEdge == true)
                                {
                                    <style> .coords-y@(i)x@(j) { border-right: 1.5px solid black; } </style>
                                }

                                <!-- All edges open -->
                                @if((@Model.Cells[i][j].TopEdge == false) 
                                 && (@Model.Cells[i][j].BottomEdge == false)
                                 && (@Model.Cells[i][j].LeftEdge == false)
                                 && (@Model.Cells[i][j].RightEdge == false))
                                {
                                    <style> .coords-y@(i)x@(j) { } </style>
                                }

                                <!-- Apply special styling for maze borders -->
                                @if(i == 0)
                                {
                                    <style> .coords-y@(i)x@(j) { border-top: 2.5px solid black; } </style>
                                }

                                @if(i == @Model.NRow - 1)
                                {
                                    <style> .coords-y@(i)x@(j) { border-bottom: 2.5px solid black; } </style>
                                }

                                @if(j == 0)
                                {
                                    <style> .coords-y@(i)x@(j) { border-left: 2.5px solid black; } </style>
                                }

                                @if(j == @Model.NCol - 1)
                                {
                                    <style> .coords-y@(i)x@(j) { border-right: 2.5px solid black; } </style>
                                }

                                <!-- Have to put this at the end so it overwrites previous styling -->
                                @if(@Model.Cells[i][j] == @Model.StartCell) 
                                {
                                    <style> .coords-y@(i)x@(j) 
                                    { 
                                        border-top: none;
                                        background-color: #96f796; 
                                    } 
                                    </style>
                                }

                                @if(@Model.Cells[i][j] == @Model.EndCell) 
                                {
                                    <style> .coords-y@(i)x@(j) 
                                    { 
                                        background-color: #e0115fc2; 
                                        border-bottom: none;
                                    } 
                                    </style>
                                }

                                <!-- Display algorithm working -->
                                @if(Model.AlgorithmDisplayMap.ContainsKey(Model.Cells[i][j])
                                && (@Model.Cells[i][j] != @Model.StartCell) 
                                && (@Model.Cells[i][j] != @Model.EndCell) )
                                {
                                    string delayStrAlgorithmDisplay = @Model.AlgorithmDisplayMap[@Model.Cells[i][j]].ToString() + "s";

                                    <div class="algorithmPath alg-path-div-y@(i)x@(j)">
                                                        
                                    </div>

                                    <style>
                                        .alg-path-div-y@(i)x@(j)
                                        {
                                            position: absolute;
                                            top: 0;
                                            right: 0;
                                            bottom: 0;
                                            left: 0;
                                            transition-property: background-color, transform;
                                            transition-delay: @delayStrAlgorithmDisplay;
                                        }
                                    </style>
                                }

                                <!-- Valid path display -->
                                @if(@Model.ValidPathDelayMap.ContainsKey(@Model.Cells[i][j])
                                && (@Model.Cells[i][j] != @Model.StartCell) 
                                && (@Model.Cells[i][j] != @Model.EndCell) )
                                {
                                    string delayStrValidPath = @Model.ValidPathDelayMap[@Model.Cells[i][j]].ToString() + "s";

                                    <!-- space between solution and path allows me select solution in JS
                                        and path in CSS as follows. They're separate selectors now
                                    -->
                                    <div class="solution path-div-y@(i)x@(j)">
                                                        
                                    </div>

                                    <style>
                                        .path-div-y@(i)x@(j)
                                        {
                                            position: absolute;
                                            top: 0;
                                            right: 0;
                                            bottom: 0;
                                            left: 0;
                                            transition-property: background-color, transform;
                                            transition-timing-function: linear;
                                            transition-duration: 1.5s;
                                            transition-delay: @delayStrValidPath;
                                        }
                                    </style>
                                }

                                @Model.Cells[i][j].ToEmptyString()
                                            
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>

    <script type="text/javascript">

        // DISPLAY VALID PATH
        function solveMazeFunc() 
        {
            console.log("hello from solveMazeFunc");
            const elements = document.querySelectorAll("div.solution");
            for (const element of elements) 
            {
                element.classList.toggle("transformed-state-validPath");
            }
        }

        const solveMazeButton = document.querySelector("#solveMaze");
        solveMazeButton.addEventListener("click", solveMazeFunc);

        // CLEAR VALID PATH
        function clearMaze()
        {
            var scrollX = window.scrollX || window.pageXOffset;
            var scrollY = window.scrollY || window.pageYOffset;
            window.location.reload();
            window.scrollTo(scrollX, scrollY);
        }

        const clearPathButton = document.querySelector("#clearMaze");
        clearPathButton.addEventListener("click", clearMaze);

        // ALGORITHM SEARCH DISPLAY
        function showSearchAlgorithmWorking() 
        {
            const elements = document.querySelectorAll("div.algorithmPath");
            for (const element of elements) 
            {
                element.classList.toggle("transformed-state-algorithmSearchDisplay");
            }

            // Its hard to see the actual path through the maze (particularly when its Bi-Directional cases)
            // after the algorithm stops working. That's why I SolveMazeFunc() here.
            let timeout;
            let timeoutDuration = @Model.FinalDisplayTimer * 1000 + 250;
            timeout = setTimeout(solveMazeFunc, timeoutDuration);
        }

        const algorithmSearchDisplayButton = document.querySelector("#algorithmSearchDisplay");
        algorithmSearchDisplayButton.addEventListener("click", showSearchAlgorithmWorking);

        // ALLOW USER TO DRAW THEIR OWN PATH
        // Maybe should be left click to draw path, right to eraze
        // Also the startCell and EndCell shouldn't get colored over
        /*
        const mazeCells = document.querySelectorAll("div.maze-cell");
        for (const cell of mazeCells)
        {
            cell.addEventListener("mousedown", func, false);
        }
        function func(event)
        {
            if(event.buttons === 0)
            {
                this.setAttribute("style", "background-color:lightblue;") // left mouse button
            }
            else if(event.buttons === 2)
            {
                this.setAttribute("style", "background-color:white;") // right mouse button
            }
        }*/

        // DOMContentLoaded fires when the initial HTML document is completely loaded & parsed
        document.addEventListener('DOMContentLoaded', function() 
        {
          let cells = document.querySelectorAll("div.maze-cell");

          cells.forEach(function(cell) 
          {
            cell.addEventListener('mousedown', function(event) 
            {
              if (event.button === 0) // Left mouse button
              { 
                this.style.backgroundColor = 'lightblue';
              } 
              else if (event.button === 2) // Right mouse button
              { 
                this.style.backgroundColor = 'white';
              }
            });

            // This is needed so that js detects user is keeping left or right button held down
            cell.addEventListener('mouseover', function() 
            {
                if (event.buttons === 1) // Left mouse button
                { 
                    this.style.backgroundColor = 'lightblue';
                } 
                else if (event.buttons === 2) // Right mouse button
                { 
                    this.style.backgroundColor = 'white';
                }
            });

            // This prevents the context menu from popping up when the user right clicks on a cell
            cell.addEventListener('contextmenu', function(event) 
            {
              event.preventDefault();
            });
          });
        });

        // MULTIPLE MODAL
        // Get references to DOM elements
        const openModalBtn = document.getElementById('open-modal-btn');
        const modal = document.getElementById('modal');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const overlay = document.getElementById('overlay');

        // Modal content
        const modalContent = [
          {
            title: 'Welcome to Maze Generator',
            content: 'The goal of this application is to generate mazes of various sizes and complexities, and allow users to have fun interacting with those mazes.',
            subheader: 'Key Features:',
            listData: [ 'Generate mazes according to your specifications', 'Draw your own path through the maze: Hold left mouse-button down to draw your path, and hold right mouse-button down to eraze your path', 'Display a valid path through the maze automatically' ]
          },
          {
            title: 'Buttons & Inputs',
            content: '',
            subheader: '',
            listData: [ 'Choose how many rows and columns you want the generated maze to have with the input boxes. Once you have entered both, click on the Generate Maze button',
                       'The Clear Path button will clear the maze of any path which has been generated either by the app or by yourself', 
                        'The Clear Maze button will destroy the current maze if one exists' ]
          }];

        let currentIndex = 0;

        function showModal() 
        {
          document.getElementById("modal").style.display = "block";
        }

        function hideModal() 
        {
          document.getElementById("modal").style.display = "none";
        }

        // Populate current modal content
        function showContent(index) 
        {
          // Retrieve current modal content from modalContent list and map it to appropriate element
          const content = modalContent[index];
          const modalTitle = modal.querySelector('h2');
          const modalText = modal.querySelector('p');
          const modalSubheader = modal.querySelector('h4');
          const modalList = document.getElementById('modal-list');
          
          modalTitle.textContent = content.title;
          modalText.textContent = content.content;
          modalSubheader.textContent = content.subheader;
          for(i = 0; i < content.listData.length; ++i) 
          {
              var li = document.createElement('li');
              li.innerText = content.listData[i];
              modalList.appendChild(li);
          }

          // greys out buttons on the modal where appropriate
          prevBtn.disabled = index === 0;
          nextBtn.disabled = index === modalContent.length - 1;
        }

        // Event listeners to control flow
        openModalBtn.addEventListener('click', showModal);
        closeModalBtn.addEventListener('click', hideModal);

        // Clear modalList for prev and next buttons , otherwise just keeps appending 
        // repeating li elements on each previous or next button click in the modal
        prevBtn.addEventListener('click', () => {
          const modalList = document.getElementById('modal-list');
          modalList.innerHTML = '';
          currentIndex--;
          showContent(currentIndex);
        });

        nextBtn.addEventListener('click', () => {
          const modalList = document.getElementById('modal-list');
          modalList.innerHTML = '';
          currentIndex++;
          showContent(currentIndex);
        });

        showContent(currentIndex);

    </script>

</body>