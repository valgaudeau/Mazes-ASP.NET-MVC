@model MazeMvcApp.Models.Maze

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Maze Generator App</title>

    <style>
        body {
            background-color: white;
            color: #333;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 75%;
            margin: 0 auto;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        h1 {
            color: #4b0082;
            text-align: center;
            margin-top: 15px;
        }

        /* margin:auto; horizontally centers the card even as the maze width increases */
        .card {
            background-color: snow;
            width: 420px;
            height: 345px;
            margin: auto;
            box-shadow: rgba(136, 165, 191, 1) 6px 2px 16px 0px, rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;
        }

        .form-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        /* 
        .button-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }*/

        .form-label {
            font-weight: bold;
            margin-left: 12px;
            margin-bottom: 0px;
        }

        .maze-container {
            border-radius: 5px;
            padding-top: 50px;
        }

        /* max-wdith: max-content makes maze div outer div width fit inner div width */
        .maze {
            display: grid;
            grid-template-rows: repeat(@Model.NRow, 20px);
            background-color: white;
            max-width: max-content;
            box-shadow: rgba(136, 165, 191, 1) 6px 2px 16px 0px, rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;
        }

        .maze-row {
            display: flex;
        }

        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #4b0082;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            margin-right: 20px;
        }

        .button:hover {
            background-color: #800080;
        }

        .form-control {
            width: 70px;
        }

    </style>
</head>

<body>
    
        <button onclick="openPopup()">HOW TO USE</button>

    <div id="popup" class="popup">
      <div class="popup-content">
        <span class="close" onclick="closePopup()">&times;</span>
        <h2>Popup Window</h2>
        <p>This is the content of the popup window.</p>
      </div>
    </div>

    <style>
        .popup {
          display: none; /* Hidden by default */
          position: fixed; /* Fixed position */
          z-index: 1; /* Place the popup on top of other elements */
          left: 0;
          top: 0;
          width: 100%; /* Full width */
          height: 100%; /* Full height */
          overflow: auto; /* Enable scrolling if needed */
          background-color: rgba(0, 0, 0, 0.5); /* Black background with transparency */
        }

        .popup-content {
          background-color: #fefefe;
          margin: 10% auto; /* Centered vertically and horizontally */
          padding: 20px;
          border: 1px solid #888;
          max-width: 400px;
          border-radius: 10px;
        }

        .close {
          float: right;
          font-size: 28px;
          font-weight: bold;
          cursor: pointer;
        }

        .close:hover,
        .close:focus {
          color: #000;
          text-decoration: none;
          cursor: pointer;
        }
    </style>

    <script>
        function openPopup() {
          document.getElementById("popup").style.display = "block";
        }

        function closePopup() {
          document.getElementById("popup").style.display = "none";
        }
    </script>


    <!-- BUTTON FOR DEBUGGING PURPOSES
    <form asp-controller="Home" asp-action="DummyMethod" method="post">
                    <div class="mb-3">
                        <label class="form-label">StartCell</label>
                        <input name="startCell" type="number" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
    </form>
    -->

    <div class="card">

        <div class="card-header">
            <h1>
                Maze Generator
            </h1>
        </div>

        <div class="card-body">
            <!-- Home is the controller, asp-action is the method -->
            <form asp-controller="Home" asp-action="GenerateMaze" method="post">
                <div class="form-group">
                    <input name="nRow" type="number" class="form-control" />
                     <label class="form-label">Number of Rows (3 - 50)</label>
                </div>

                <div class="form-group">
                    <input name="nCol" type="number" class="form-control" />
                    <label class="form-label">Number of Columns (3 - 50) </label>
                </div>

                <div class="form-group">
                    <button type="submit" class="button">Create Maze</button>
                </div>
            </form>
            <!-- If I put this button in the form error happens, something to do with submit I think -->

            <button id="solveMaze" class="button">Display Path</button>
            <button id="clearMaze" class="button">Clear Maze</button>

        </div>
    </div>

    <div class="maze-container">
        <div class="maze">
            @if (@Model.NRow > 1 && @Model.NCol > 1)
            {
                @for (int i = 0; i < @Model.NRow; i++)
                {
                    <div class="maze-row">
                        @for (int j = 0; j < @Model.NCol; j++)
                        {
                            <!-- This is to make cell height & width a percentage of table row / col -->
                            double a = 100 / @Model.NCol;
                            string a2 = a.ToString() + '%';

                            <!-- creating new class for each cell -->
                            <div class="maze-cell-coords-y@(i)x@(j)">

                                @if (@Model.Cells[i][j] == @Model.StartCell) 
                                {
                                    <style> .maze-cell-coords-y@(i)x@(j) { background-color: green; } </style>
                                }

                                @if (@Model.Cells[i][j] == @Model.EndCell) 
                                {
                                    <style> .maze-cell-coords-y@(i)x@(j) { background-color: red; } </style>
                                }

                                @if (@Model.Cells[i][j].DisplayTopEdge == true)
                                {
                                    <style>
                                        .maze-cell-coords-y@(i)x@(j) 
                                        {
                                            position: relative;
                                            border-top: 3px solid black;
                                            height: 20px;
                                            width: 20px;
                                        }
                                    </style>
                                }

                                @if (@Model.Cells[i][j].DisplayLeftEdge == true)
                                {
                                    <style>
                                        .maze-cell-coords-y@(i)x@(j) 
                                        {
                                            position: relative;
                                            border-left: 3px solid black;
                                            height: 20px;
                                            width: 20px;
                                        }
                                    </style>
                                }

                                @if ( (@Model.Cells[i][j].DisplayTopEdge == false)
                                        && (@Model.Cells[i][j].DisplayLeftEdge == false) 
                                        && (@Model.Cells[i][j].BottomEdge == false)
                                        && (@Model.Cells[i][j].RightEdge == false) )
                                {
                                    <style>
                                        .maze-cell-coords-y@(i)x@(j) 
                                        {
                                            position: relative;
                                            height: 20px;
                                            width: 20px;
                                        }
                                    </style>
                                }

                                @if (@Model.Cells[i][j].BottomEdge == true)
                                {
                                    <style>
                                        .maze-cell-coords-y@(i)x@(j) 
                                        {
                                            position: relative;
                                            border-bottom: 3px solid black;
                                            height: 20px;
                                            width: 20px;
                                        }
                                    </style>
                                }

                                @if (@Model.Cells[i][j].RightEdge == true)
                                {
                                    <style>
                                        .maze-cell-coords-y@(i)x@(j) 
                                        {
                                            position: relative;
                                            border-right: 3px solid black;
                                            height: 20px;
                                            width: 20px;
                                        }
                                    </style>
                                }

                                <!-- Can all sides be open? -->
                                @if ( (@Model.Cells[i][j].TopEdge == false) 
                                        && (@Model.Cells[i][j].BottomEdge == false)
                                        && (@Model.Cells[i][j].LeftEdge == false)
                                        && (@Model.Cells[i][j].RightEdge == false))
                                {
                                    <style>
                                        .maze-cell-coords-y@(i)x@(j) 
                                        {
                                            position: relative;
                                            height: 20px;
                                            width: 20px;
                                        }
                                    </style>
                                }

                                    <style>
                                    .transformed-state 
                                    {
                                        background-color: #00ffa1 !important;
                                        transition-property: background-color, transform;
                                        transition-timing-function: linear;
                                        transition-duration: 3s;
                                    }
                                </style>

                                <!-- If maze is solved, display path --> 
                                @if(@Model.IsSolved)
                                {
                                    if(@Model.ValidPathDelayMap.ContainsKey(@Model.Cells[i][j])
                                    && (@Model.Cells[i][j] != @Model.StartCell) 
                                    && (@Model.Cells[i][j] != @Model.EndCell) )
                                    {
                                        string delayStr = @Model.ValidPathDelayMap[@Model.Cells[i][j]].ToString() + "s";

                                        <!-- space between solution and path allows me select solution in JS
                                            and path in CSS as follows. They're separate selectors now
                                        -->
                                        <div class="solution path-div-y@(i)x@(j)">
                                                        
                                        </div>

                                        <style>
                                            .path-div-y@(i)x@(j)
                                            {
                                                position: absolute;
                                                top: 0;
                                                right: 0;
                                                bottom: 0;
                                                left: 0;
                                                background-color: white;
                                                transition-property: background-color, transform;
                                                transition-timing-function: linear;
                                                transition-duration: 3s;
                                                transition-delay: @delayStr;
                                            }
                                        </style>
                                    }
                                }

                                @Model.Cells[i][j].ToEmptyString()
                                            
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>

    <script type="text/javascript">
        function change() {
            const elements = document.querySelectorAll("div.solution");
            for (const element of elements) {
                element.classList.toggle("transformed-state");
            }
        }
        const changeButton = document.querySelector("#solveMaze");
        changeButton.addEventListener("click", change);
    </script>

</body>