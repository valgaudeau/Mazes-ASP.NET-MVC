@model MazeMvcApp.Models.Maze
@{
    ViewBag.Title = "Home Page";
}

<h1>Maze Generator</h1>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Maze Generator App</title>

    <style>
        body {
            background-color: #f9f2f4;
            color: #333;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        h1 {
            color: #4b0082;
            text-align: center;
            margin-top: 50px;
        }

        .container {
           max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        .maze-container {
           background-color: #fff;
            border: 1px solid #4b0082;
            border-radius: 5px;
            padding: 10px;
            margin-top: 20px;
        }

        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #4b0082;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
            margin-right: 20px;
        }

        .button:hover {
            background-color: #800080;
        }
    </style>

</head>

<body> 

    <hr />

    <!-- BUTTON FOR DEBUGGING PURPOSES
    <form asp-controller="Home" asp-action="DummyMethod" method="post">
                    <div class="mb-3">
                        <label class="form-label">StartCell</label>
                        <input name="startCell" type="number" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
    </form>
    -->

    <a href="@Url.Action("GenerateMaze", "Maze")" class="button">Generate Maze</a>
    <button id="solveMaze">Change</button>

    <hr />

<div class="row">

        <div class="card">
            <div class="card-header">

                <h5>
                    Create a new maze
                </h5>
            </div>

            <div class="card-body">
                <!-- Home is the controller, asp-action is the method -->
                <form asp-controller="Home" asp-action="GenerateMaze" method="post">
                    <div class="mb-3">
                        <label class="form-label">NRow</label>
                        <input name="nRow" type="number" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">NCol</label>
                        <input name="nCol" type="text" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>

                <div class="maze-container">
                    <div class="maze">
                        @if (@Model.NRow > 1 && @Model.NCol > 1)
                        {
                            @for (int i = 0; i < @Model.NRow; i++)
                            {
                                double delay = 0.5d;
                                <div class="maze-row">
                                    @for (int j = 0; j < @Model.NCol; j++)
                                    {
                                        <!-- This is to make cell height & width a percentage of table row / col -->
                                        double a = 100 / @Model.NCol;
                                        string a2 = a.ToString() + '%';
                                        
                                        string delayStr = delay.ToString() + "s";

                                        <!-- creating new class for each cell -->
                                        <div class="maze-cell-coords-y@(i)x@(j)">

                                            @if (@Model.Cells[i][j] == @Model.StartCell) 
                                            {
                                                <style> .maze-cell-coords-y@(i)x@(j) { background-color: green; } </style>
                                            }

                                            @if (@Model.Cells[i][j] == @Model.EndCell) 
                                            {
                                                <style> .maze-cell-coords-y@(i)x@(j) { background-color: red; } </style>
                                            }

                                            @if (@Model.Cells[i][j].DisplayTopEdge == true)
                                            {
                                                <style>
                                                    .maze-cell-coords-y@(i)x@(j) 
                                                    {
                                                        position: relative;
                                                        border-top: 3px solid purple;
                                                        height: 20px;
                                                        width: 20px;
                                                    }
                                                </style>
                                            }

                                            @if (@Model.Cells[i][j].DisplayLeftEdge == true)
                                            {
                                                <style>
                                                    .maze-cell-coords-y@(i)x@(j) 
                                                    {
                                                        position: relative;
                                                        border-left: 3px solid purple;
                                                        height: 20px;
                                                        width: 20px;
                                                    }
                                                </style>
                                            }

                                            @if ( (@Model.Cells[i][j].DisplayTopEdge == false)
                                                   && (@Model.Cells[i][j].DisplayLeftEdge == false) 
                                                   && (@Model.Cells[i][j].BottomEdge == false)
                                                   && (@Model.Cells[i][j].RightEdge == false) )
                                            {
                                                <style>
                                                    .maze-cell-coords-y@(i)x@(j) 
                                                    {
                                                        position: relative;
                                                        height: 20px;
                                                        width: 20px;
                                                    }
                                                </style>
                                            }

                                            @if (@Model.Cells[i][j].BottomEdge == true)
                                            {
                                                <style>
                                                    .maze-cell-coords-y@(i)x@(j) 
                                                    {
                                                        position: relative;
                                                        border-bottom: 3px solid purple;
                                                        height: 20px;
                                                        width: 20px;
                                                    }
                                                </style>
                                            }

                                            @if (@Model.Cells[i][j].RightEdge == true)
                                            {
                                                <style>
                                                    .maze-cell-coords-y@(i)x@(j) 
                                                    {
                                                        position: relative;
                                                        border-right: 3px solid purple;
                                                        height: 20px;
                                                        width: 20px;
                                                    }
                                                </style>
                                            }

                                            <!-- Can all sides be open? -->
                                            @if ( (@Model.Cells[i][j].TopEdge == false) 
                                                   && (@Model.Cells[i][j].BottomEdge == false)
                                                   && (@Model.Cells[i][j].LeftEdge == false)
                                                   && (@Model.Cells[i][j].RightEdge == false))
                                            {
                                                <style>
                                                    .maze-cell-coords-y@(i)x@(j) 
                                                    {
                                                        position: relative;
                                                        height: 20px;
                                                        width: 20px;
                                                    }
                                                </style>
                                            }

                                             <style>
                                                .transformed-state 
                                                {
                                                    background-color: lightblue !important;
                                                    transition-property: background-color, transform;
                                                    transition-timing-function: ease-in-out;
                                                    transition-duration: 3s;
                                                }
                                            </style>

                                            <!-- If maze is solved, display path --> 
                                            @if(@Model.IsSolved)
                                            {
                                                if(@Model.ValidPath.Contains(@Model.Cells[i][j]) 
                                                   && (@Model.Cells[i][j] != @Model.StartCell) 
                                                   && (@Model.Cells[i][j] != @Model.EndCell) )
                                                { 
                                                    <!-- space between solution and path allows me select solution in JS
                                                        and path in CSS as follows. They're separate selectors now
                                                    -->
                                                    <div class="solution path-div-y@(i)x@(j)">
                                                        
                                                    </div>

                                                    <style>
                                                        .path-div-y@(i)x@(j)
                                                        {
                                                            position: absolute;
                                                            top: 0;
                                                            right: 0;
                                                            bottom: 0;
                                                            left: 0;
                                                            background-color: white;
                                                            transition-property: background-color, transform;
                                                            transition-timing-function: ease-in-out;
                                                            transition-duration: 3s;
                                                            transition-delay: @delayStr;
                                                        }
                                                    </style>

                                                }
                                            }

                                            @Model.Cells[i][j].ToEmptyString()
                                            
                                        </div>
                                        delay = delay + 0.2;
                                    }
                                </div>
                            }
                        }
                    </div>

                </div>

                <script type="text/javascript">
                    function change() {
                        console.log("hi");
                        
                        const elements = document.querySelectorAll("div.solution");
                        for (const element of elements) {
                            console.log("hi");
                            element.classList.toggle("transformed-state");
                        }
                    }

                    const changeButton = document.querySelector("#solveMaze");
                    changeButton.addEventListener("click", change);
                </script>

                <style>
                    .maze 
                    {
                        display: grid;
                        grid-template-rows: repeat(@Model.NRow, 20px);
                        background-color: white;
                        padding: 10px;
                    }

                    .maze-row 
                    {
                        display: flex;
                    }

                </style>

            </div>

            <div class="card-footer">
            </div>
        </div>

</div>

</body>